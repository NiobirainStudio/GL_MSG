{"ast":null,"code":"import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nvar StorageStrategies;\n\n(function (StorageStrategies) {\n  StorageStrategies[\"Local\"] = \"local_strategy\";\n  StorageStrategies[\"Session\"] = \"session_strategy\";\n  StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nclass CompatHelper {\n  static isStorageAvailable(storage) {\n    let available = true;\n\n    try {\n      if (typeof storage === 'object') {\n        storage.setItem('test-storage', 'foobar');\n        storage.removeItem('test-storage');\n      } else available = false;\n    } catch (e) {\n      available = false;\n    }\n\n    return available;\n  }\n\n}\n\nfunction noop() {}\n\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\n\nclass StorageKeyManager {\n  static normalize(raw) {\n    raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n    return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n  }\n\n  static isNormalizedKey(key) {\n    return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n  }\n\n  static setPrefix(prefix) {\n    StorageKeyManager.prefix = prefix;\n  }\n\n  static setSeparator(separator) {\n    StorageKeyManager.separator = separator;\n  }\n\n  static setCaseSensitive(enable) {\n    StorageKeyManager.isCaseSensitive = enable;\n  }\n\n  static consumeConfiguration(config) {\n    if ('prefix' in config) this.setPrefix(config.prefix);\n    if ('separator' in config) this.setSeparator(config.separator);\n    if ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n  }\n\n}\n\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\n\nclass SyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n\n  retrieve(key) {\n    let value;\n    this.strategy.get(StorageKeyManager.normalize(key)).subscribe(result => value = typeof result === 'undefined' ? null : result);\n    return value;\n  }\n\n  store(key, value) {\n    this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n    return value;\n  }\n\n  clear(key) {\n    if (key !== undefined) this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);else this.strategy.clear().subscribe(noop);\n  }\n\n  getStrategyName() {\n    return this.strategy.name;\n  }\n\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n  }\n\n}\n\nclass AsyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n\n  retrieve(key) {\n    return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(value => typeof value === 'undefined' ? null : value));\n  }\n\n  store(key, value) {\n    return this.strategy.set(StorageKeyManager.normalize(key), value);\n  }\n\n  clear(key) {\n    return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n  }\n\n  getStrategyName() {\n    return this.strategy.name;\n  }\n\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n  }\n\n}\n\nclass StrategyCacheService {\n  constructor() {\n    this.caches = {};\n  }\n\n  get(strategyName, key) {\n    return this.getCacheStore(strategyName)[key];\n  }\n\n  set(strategyName, key, value) {\n    this.getCacheStore(strategyName)[key] = value;\n  }\n\n  del(strategyName, key) {\n    delete this.getCacheStore(strategyName)[key];\n  }\n\n  clear(strategyName) {\n    this.caches[strategyName] = {};\n  }\n\n  getCacheStore(strategyName) {\n    if (strategyName in this.caches) return this.caches[strategyName];\n    return this.caches[strategyName] = {};\n  }\n\n}\n\nStrategyCacheService.ɵfac = function StrategyCacheService_Factory(t) {\n  return new (t || StrategyCacheService)();\n};\n\nStrategyCacheService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StrategyCacheService,\n  factory: StrategyCacheService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StrategyCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\n\nfunction getLocalStorage() {\n  return typeof window !== 'undefined' ? window.localStorage : null;\n}\n\nconst LocalStorageProvider = {\n  provide: LOCAL_STORAGE,\n  useFactory: getLocalStorage\n};\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\n\nfunction getSessionStorage() {\n  return typeof window !== 'undefined' ? window.sessionStorage : null;\n}\n\nconst SessionStorageProvider = {\n  provide: SESSION_STORAGE,\n  useFactory: getSessionStorage\n};\n\nclass BaseSyncStorageStrategy {\n  constructor(storage, cache) {\n    this.storage = storage;\n    this.cache = cache;\n    this.keyChanges = new Subject();\n  }\n\n  get isAvailable() {\n    if (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n    return this._isAvailable;\n  }\n\n  get(key) {\n    let data = this.cache.get(this.name, key);\n    if (data !== undefined) return of(data);\n\n    try {\n      const item = this.storage.getItem(key);\n\n      if (item !== null) {\n        data = JSON.parse(item);\n        this.cache.set(this.name, key, data);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n\n    return of(data);\n  }\n\n  set(key, value) {\n    const data = JSON.stringify(value);\n    this.storage.setItem(key, data);\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n\n  del(key) {\n    this.storage.removeItem(key);\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n\n  clear() {\n    this.storage.clear();\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n\n}\n\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = LocalStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n\n}\n\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\n\nLocalStorageStrategy.ɵfac = function LocalStorageStrategy_Factory(t) {\n  return new (t || LocalStorageStrategy)(i0.ɵɵinject(LOCAL_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n};\n\nLocalStorageStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LocalStorageStrategy,\n  factory: LocalStorageStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCAL_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = SessionStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (event.key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n\n}\n\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\n\nSessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) {\n  return new (t || SessionStorageStrategy)(i0.ɵɵinject(SESSION_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n};\n\nSessionStorageStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SessionStorageStrategy,\n  factory: SessionStorageStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SessionStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SESSION_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass InMemoryStorageStrategy {\n  constructor(cache) {\n    this.cache = cache;\n    this.keyChanges = new Subject();\n    this.isAvailable = true;\n    this.name = InMemoryStorageStrategy.strategyName;\n  }\n\n  get(key) {\n    return of(this.cache.get(this.name, key));\n  }\n\n  set(key, value) {\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n\n  del(key) {\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n\n  clear() {\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n\n}\n\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\n\nInMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) {\n  return new (t || InMemoryStorageStrategy)(i0.ɵɵinject(StrategyCacheService));\n};\n\nInMemoryStorageStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InMemoryStorageStrategy,\n  factory: InMemoryStorageStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InMemoryStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StrategyCacheService,\n      decorators: [{\n        type: Inject,\n        args: [StrategyCacheService]\n      }]\n    }];\n  }, null);\n})();\n\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [{\n  provide: STORAGE_STRATEGIES,\n  useClass: InMemoryStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: LocalStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: SessionStorageStrategy,\n  multi: true\n}];\nconst StorageStrategyStubName = 'stub_strategy';\n\nclass StorageStrategyStub {\n  constructor(name) {\n    this.keyChanges = new Subject();\n    this.store = {};\n    this._available = true;\n    this.name = name || StorageStrategyStubName;\n  }\n\n  get isAvailable() {\n    return this._available;\n  }\n\n  get(key) {\n    return of(this.store[key]);\n  }\n\n  set(key, value) {\n    this.store[key] = value;\n    this.keyChanges.next(key);\n    return of(value);\n  }\n\n  del(key) {\n    delete this.store[key];\n    this.keyChanges.next(key);\n    return of(null);\n  }\n\n  clear() {\n    this.store = {};\n    this.keyChanges.next(null);\n    return of(null);\n  }\n\n}\n\nclass StorageStub {\n  constructor() {\n    this.store = {};\n  }\n\n  get length() {\n    return Object.keys(this.store).length;\n  }\n\n  clear() {\n    this.store = {};\n  }\n\n  getItem(key) {\n    return this.store[key] || null;\n  }\n\n  key(index) {\n    return Object.keys(this.store)[index];\n  }\n\n  removeItem(key) {\n    delete this.store[key];\n  }\n\n  setItem(key, value) {\n    this.store[key] = value;\n  }\n\n}\n\nconst InvalidStrategyError = 'invalid_strategy';\n\nclass StrategyIndex {\n  constructor(strategies) {\n    this.strategies = strategies;\n    this.registration$ = new Subject();\n    if (!strategies) strategies = [];\n    this.strategies = strategies.reverse().map((strategy, index, arr) => strategy.name).map((name, index, arr) => arr.indexOf(name) === index ? index : null).filter(index => index !== null).map(index => strategies[index]);\n  }\n\n  static get(name) {\n    if (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n    let strategy = this.index[name];\n\n    if (!strategy.isAvailable) {\n      strategy = this.index[StorageStrategies.InMemory];\n    }\n\n    return strategy;\n  }\n\n  static set(name, strategy) {\n    this.index[name] = strategy;\n  }\n\n  static clear(name) {\n    if (name !== undefined) delete this.index[name];else this.index = {};\n  }\n\n  static isStrategyRegistered(name) {\n    return name in this.index;\n  }\n\n  static hasRegistredStrategies() {\n    return Object.keys(this.index).length > 0;\n  }\n\n  getStrategy(name) {\n    return StrategyIndex.get(name);\n  }\n\n  indexStrategies() {\n    this.strategies.forEach(strategy => this.register(strategy.name, strategy));\n  }\n\n  indexStrategy(name, overrideIfExists = false) {\n    if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n    const strategy = this.strategies.find(strategy => strategy.name === name);\n    if (!strategy) throw new Error(InvalidStrategyError);\n    this.register(name, strategy, overrideIfExists);\n    return strategy;\n  }\n\n  register(name, strategy, overrideIfExists = false) {\n    if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n      StrategyIndex.set(name, strategy);\n      this.registration$.next(name);\n    }\n  }\n\n}\n\nStrategyIndex.index = {};\n\nStrategyIndex.ɵfac = function StrategyIndex_Factory(t) {\n  return new (t || StrategyIndex)(i0.ɵɵinject(STORAGE_STRATEGIES, 8));\n};\n\nStrategyIndex.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StrategyIndex,\n  factory: StrategyIndex.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StrategyIndex, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [STORAGE_STRATEGIES]\n      }]\n    }];\n  }, null);\n})();\n\nclass LocalStorageService extends SyncStorage {}\n\nfunction buildService$1(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Local);\n  return new SyncStorage(strategy);\n}\n\nconst LocalStorageServiceProvider = {\n  provide: LocalStorageService,\n  useFactory: buildService$1,\n  deps: [StrategyIndex]\n};\n\nclass SessionStorageService extends SyncStorage {}\n\nfunction buildService(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Session);\n  return new SyncStorage(strategy);\n}\n\nconst SessionStorageServiceProvider = {\n  provide: SessionStorageService,\n  useFactory: buildService,\n  deps: [StrategyIndex]\n};\n\nclass DecoratorBuilder {\n  static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n    const rawKey = key || propName;\n    let storageKey;\n    Object.defineProperty(prototype, propName, {\n      get: function () {\n        let value;\n        StrategyIndex.get(strategyName).get(getKey()).subscribe(result => value = result);\n        return value === undefined ? defaultValue : value;\n      },\n      set: function (value) {\n        StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n      }\n    });\n\n    function getKey() {\n      if (storageKey !== undefined) return storageKey;\n      return storageKey = StorageKeyManager.normalize(rawKey);\n    }\n  }\n\n}\n\nfunction LocalStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n  };\n}\n\nfunction SessionStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n  };\n}\n\nconst Services = [LocalStorageServiceProvider, SessionStorageServiceProvider];\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\n\nfunction appInit(index) {\n  index.indexStrategies();\n  return () => StrategyIndex.index;\n}\n\nclass NgxWebstorageModule {\n  constructor(index, config) {\n    if (config) StorageKeyManager.consumeConfiguration(config);else console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n  }\n\n  static forRoot(config = {}) {\n    return {\n      ngModule: NgxWebstorageModule,\n      providers: [{\n        provide: LIB_CONFIG,\n        useValue: config\n      }, LocalStorageProvider, SessionStorageProvider, ...Services, ...Strategies, {\n        provide: APP_INITIALIZER,\n        useFactory: appInit,\n        deps: [StrategyIndex],\n        multi: true\n      }]\n    };\n  }\n\n}\n\nNgxWebstorageModule.ɵfac = function NgxWebstorageModule_Factory(t) {\n  return new (t || NgxWebstorageModule)(i0.ɵɵinject(StrategyIndex), i0.ɵɵinject(LIB_CONFIG, 8));\n};\n\nNgxWebstorageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxWebstorageModule\n});\nNgxWebstorageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxWebstorageModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: StrategyIndex\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIB_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit };","map":{"version":3,"sources":["D:/gitted/GL_PROJ/ClientApp/node_modules/ngx-webstorage/fesm2015/ngx-webstorage.mjs"],"names":["filter","switchMap","distinctUntilChanged","shareReplay","map","i0","Injectable","InjectionToken","PLATFORM_ID","Inject","Optional","APP_INITIALIZER","NgModule","Subject","of","isPlatformBrowser","StorageStrategies","CompatHelper","isStorageAvailable","storage","available","setItem","removeItem","e","noop","DefaultPrefix","DefaultSeparator","DefaultIsCaseSensitive","StorageKeyManager","normalize","raw","isCaseSensitive","toLowerCase","prefix","separator","isNormalizedKey","key","indexOf","setPrefix","setSeparator","setCaseSensitive","enable","consumeConfiguration","config","caseSensitive","SyncStorage","constructor","strategy","retrieve","value","get","subscribe","result","store","set","clear","undefined","del","getStrategyName","name","observe","keyChanges","pipe","changed","AsyncStorage","StrategyCacheService","caches","strategyName","getCacheStore","ɵfac","ɵprov","type","args","providedIn","LOCAL_STORAGE","getLocalStorage","window","localStorage","LocalStorageProvider","provide","useFactory","SESSION_STORAGE","getSessionStorage","sessionStorage","SessionStorageProvider","BaseSyncStorageStrategy","cache","isAvailable","_isAvailable","data","item","getItem","JSON","parse","err","console","warn","stringify","next","LocalStorageStrategy","platformId","zone","listenExternalChanges","addEventListener","event","run","storageArea","Local","NgZone","decorators","SessionStorageStrategy","Session","InMemoryStorageStrategy","InMemory","STORAGE_STRATEGIES","Strategies","useClass","multi","StorageStrategyStubName","StorageStrategyStub","_available","StorageStub","length","Object","keys","index","InvalidStrategyError","StrategyIndex","strategies","registration$","reverse","arr","isStrategyRegistered","Error","hasRegistredStrategies","getStrategy","indexStrategies","forEach","register","indexStrategy","overrideIfExists","find","LocalStorageService","buildService$1","LocalStorageServiceProvider","deps","SessionStorageService","buildService","SessionStorageServiceProvider","DecoratorBuilder","buildSyncStrategyDecorator","prototype","propName","defaultValue","rawKey","storageKey","defineProperty","getKey","LocalStorage","SessionStorage","Services","LIB_CONFIG","appInit","NgxWebstorageModule","error","forRoot","ngModule","providers","useValue","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\n\nvar StorageStrategies;\n(function (StorageStrategies) {\n    StorageStrategies[\"Local\"] = \"local_strategy\";\n    StorageStrategies[\"Session\"] = \"session_strategy\";\n    StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nclass CompatHelper {\n    static isStorageAvailable(storage) {\n        let available = true;\n        try {\n            if (typeof storage === 'object') {\n                storage.setItem('test-storage', 'foobar');\n                storage.removeItem('test-storage');\n            }\n            else\n                available = false;\n        }\n        catch (e) {\n            available = false;\n        }\n        return available;\n    }\n}\n\nfunction noop() { }\n\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\n\nclass StorageKeyManager {\n    static normalize(raw) {\n        raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n        return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n    }\n    static isNormalizedKey(key) {\n        return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n    }\n    static setPrefix(prefix) {\n        StorageKeyManager.prefix = prefix;\n    }\n    static setSeparator(separator) {\n        StorageKeyManager.separator = separator;\n    }\n    static setCaseSensitive(enable) {\n        StorageKeyManager.isCaseSensitive = enable;\n    }\n    static consumeConfiguration(config) {\n        if ('prefix' in config)\n            this.setPrefix(config.prefix);\n        if ('separator' in config)\n            this.setSeparator(config.separator);\n        if ('caseSensitive' in config)\n            this.setCaseSensitive(config.caseSensitive);\n    }\n}\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\n\nclass SyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        let value;\n        this.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);\n        return value;\n    }\n    store(key, value) {\n        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n        return value;\n    }\n    clear(key) {\n        if (key !== undefined)\n            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);\n        else\n            this.strategy.clear().subscribe(noop);\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n    }\n}\n\nclass AsyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map((value) => typeof value === 'undefined' ? null : value));\n    }\n    store(key, value) {\n        return this.strategy.set(StorageKeyManager.normalize(key), value);\n    }\n    clear(key) {\n        return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n    }\n}\n\nclass StrategyCacheService {\n    constructor() {\n        this.caches = {};\n    }\n    get(strategyName, key) {\n        return this.getCacheStore(strategyName)[key];\n    }\n    set(strategyName, key, value) {\n        this.getCacheStore(strategyName)[key] = value;\n    }\n    del(strategyName, key) {\n        delete this.getCacheStore(strategyName)[key];\n    }\n    clear(strategyName) {\n        this.caches[strategyName] = {};\n    }\n    getCacheStore(strategyName) {\n        if (strategyName in this.caches)\n            return this.caches[strategyName];\n        return this.caches[strategyName] = {};\n    }\n}\nStrategyCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StrategyCacheService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nStrategyCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StrategyCacheService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StrategyCacheService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n    return (typeof window !== 'undefined') ? window.localStorage : null;\n}\nconst LocalStorageProvider = { provide: LOCAL_STORAGE, useFactory: getLocalStorage };\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n    return (typeof window !== 'undefined') ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = { provide: SESSION_STORAGE, useFactory: getSessionStorage };\n\nclass BaseSyncStorageStrategy {\n    constructor(storage, cache) {\n        this.storage = storage;\n        this.cache = cache;\n        this.keyChanges = new Subject();\n    }\n    get isAvailable() {\n        if (this._isAvailable === undefined)\n            this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n        return this._isAvailable;\n    }\n    get(key) {\n        let data = this.cache.get(this.name, key);\n        if (data !== undefined)\n            return of(data);\n        try {\n            const item = this.storage.getItem(key);\n            if (item !== null) {\n                data = JSON.parse(item);\n                this.cache.set(this.name, key, data);\n            }\n        }\n        catch (err) {\n            console.warn(err);\n        }\n        return of(data);\n    }\n    set(key, value) {\n        const data = JSON.stringify(value);\n        this.storage.setItem(key, data);\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.storage.removeItem(key);\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.storage.clear();\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = LocalStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n}\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\nLocalStorageStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: LocalStorageStrategy, deps: [{ token: LOCAL_STORAGE }, { token: StrategyCacheService }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nLocalStorageStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: LocalStorageStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: LocalStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LOCAL_STORAGE]\n                    }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: i0.NgZone }];\n    } });\n\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = SessionStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (event.key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n}\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\nSessionStorageStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SessionStorageStrategy, deps: [{ token: SESSION_STORAGE }, { token: StrategyCacheService }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nSessionStorageStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SessionStorageStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SessionStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [SESSION_STORAGE]\n                    }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: i0.NgZone }];\n    } });\n\nclass InMemoryStorageStrategy {\n    constructor(cache) {\n        this.cache = cache;\n        this.keyChanges = new Subject();\n        this.isAvailable = true;\n        this.name = InMemoryStorageStrategy.strategyName;\n    }\n    get(key) {\n        return of(this.cache.get(this.name, key));\n    }\n    set(key, value) {\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\nInMemoryStorageStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: InMemoryStorageStrategy, deps: [{ token: StrategyCacheService }], target: i0.ɵɵFactoryTarget.Injectable });\nInMemoryStorageStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: InMemoryStorageStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: InMemoryStorageStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: StrategyCacheService, decorators: [{\n                        type: Inject,\n                        args: [StrategyCacheService]\n                    }] }];\n    } });\n\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [\n    { provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true },\n];\n\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n    constructor(name) {\n        this.keyChanges = new Subject();\n        this.store = {};\n        this._available = true;\n        this.name = name || StorageStrategyStubName;\n    }\n    get isAvailable() {\n        return this._available;\n    }\n    get(key) {\n        return of(this.store[key]);\n    }\n    set(key, value) {\n        this.store[key] = value;\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        delete this.store[key];\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.store = {};\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass StorageStub {\n    constructor() {\n        this.store = {};\n    }\n    get length() {\n        return Object.keys(this.store).length;\n    }\n    clear() {\n        this.store = {};\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    key(index) {\n        return Object.keys(this.store)[index];\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n\nconst InvalidStrategyError = 'invalid_strategy';\nclass StrategyIndex {\n    constructor(strategies) {\n        this.strategies = strategies;\n        this.registration$ = new Subject();\n        if (!strategies)\n            strategies = [];\n        this.strategies = strategies.reverse()\n            .map((strategy, index, arr) => strategy.name)\n            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)\n            .filter((index) => index !== null)\n            .map((index) => strategies[index]);\n    }\n    static get(name) {\n        if (!this.isStrategyRegistered(name))\n            throw Error(InvalidStrategyError);\n        let strategy = this.index[name];\n        if (!strategy.isAvailable) {\n            strategy = this.index[StorageStrategies.InMemory];\n        }\n        return strategy;\n    }\n    static set(name, strategy) {\n        this.index[name] = strategy;\n    }\n    static clear(name) {\n        if (name !== undefined)\n            delete this.index[name];\n        else\n            this.index = {};\n    }\n    static isStrategyRegistered(name) {\n        return name in this.index;\n    }\n    static hasRegistredStrategies() {\n        return Object.keys(this.index).length > 0;\n    }\n    getStrategy(name) {\n        return StrategyIndex.get(name);\n    }\n    indexStrategies() {\n        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));\n    }\n    indexStrategy(name, overrideIfExists = false) {\n        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)\n            return StrategyIndex.get(name);\n        const strategy = this.strategies.find((strategy) => strategy.name === name);\n        if (!strategy)\n            throw new Error(InvalidStrategyError);\n        this.register(name, strategy, overrideIfExists);\n        return strategy;\n    }\n    register(name, strategy, overrideIfExists = false) {\n        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n            StrategyIndex.set(name, strategy);\n            this.registration$.next(name);\n        }\n    }\n}\nStrategyIndex.index = {};\nStrategyIndex.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StrategyIndex, deps: [{ token: STORAGE_STRATEGIES, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nStrategyIndex.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StrategyIndex, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StrategyIndex, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [STORAGE_STRATEGIES]\n                    }] }];\n    } });\n\nclass LocalStorageService extends SyncStorage {\n}\nfunction buildService$1(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Local);\n    return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n    provide: LocalStorageService,\n    useFactory: buildService$1,\n    deps: [StrategyIndex]\n};\n\nclass SessionStorageService extends SyncStorage {\n}\nfunction buildService(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Session);\n    return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n    provide: SessionStorageService,\n    useFactory: buildService,\n    deps: [StrategyIndex]\n};\n\nclass DecoratorBuilder {\n    static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n        const rawKey = key || propName;\n        let storageKey;\n        Object.defineProperty(prototype, propName, {\n            get: function () {\n                let value;\n                StrategyIndex.get(strategyName).get(getKey()).subscribe((result) => value = result);\n                return value === undefined ? defaultValue : value;\n            },\n            set: function (value) {\n                StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n            }\n        });\n        function getKey() {\n            if (storageKey !== undefined)\n                return storageKey;\n            return storageKey = StorageKeyManager.normalize(rawKey);\n        }\n    }\n}\n\nfunction LocalStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n    };\n}\nfunction SessionStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n    };\n}\n\nconst Services = [\n    LocalStorageServiceProvider,\n    SessionStorageServiceProvider\n];\n\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nfunction appInit(index) {\n    index.indexStrategies();\n    return () => StrategyIndex.index;\n}\nclass NgxWebstorageModule {\n    constructor(index, config) {\n        if (config)\n            StorageKeyManager.consumeConfiguration(config);\n        else\n            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: NgxWebstorageModule,\n            providers: [\n                {\n                    provide: LIB_CONFIG,\n                    useValue: config,\n                },\n                LocalStorageProvider,\n                SessionStorageProvider,\n                ...Services,\n                ...Strategies,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: appInit,\n                    deps: [StrategyIndex],\n                    multi: true\n                }\n            ]\n        };\n    }\n}\nNgxWebstorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxWebstorageModule, deps: [{ token: StrategyIndex }, { token: LIB_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nNgxWebstorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxWebstorageModule });\nNgxWebstorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxWebstorageModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxWebstorageModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () {\n        return [{ type: StrategyIndex }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [LIB_CONFIG]\n                    }] }];\n    } });\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit };\n"]},"metadata":{},"sourceType":"module"}